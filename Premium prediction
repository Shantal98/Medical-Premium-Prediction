import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.linear_model import LinearRegression, Lasso
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

url = 'https://github.com/Shantal98/Medical-Premium-Prediction/blob/main/Medicalpremium.csv'
df = pd.read_csv(url)
print(df.head())

#Adding BMI
# Height is in cm, convert to meters
df['BMI'] = df['Weight'] / ((df['Height'] / 100) ** 2)
# 3. Define features and target
X = df.drop(columns=['PremiumPrice'])  # all other columns
y = df['PremiumPrice']

# Include BMI and drop Weight/Height if using BMI
X['BMI'] = df['BMI']
X = X.drop(columns=['Height', 'Weight'])

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 5. Initialize models
models = {
    'RandomForest': RandomForestRegressor(n_estimators=100, random_state=42)    
}

results = {}

from sklearn.ensemble import RandomForestRegressor

# Instantiate the model
rf = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to your training data
rf.fit(X_train, y_train)
pip install streamlit scikit-learn pandas numpy

import joblib
from sklearn.ensemble import RandomForestRegressor

# Assuming X_train and y_train already defined and include BMI
model = RandomForestRegressor()
model.fit(X_train, y_train)

# Save model
joblib.dump(model, "random_forest_model.pkl")
joblib.dump(X_train.columns.tolist(), "model_features.pkl")

import joblib

# Load the trained model and features
model = joblib.load('random_forest_model.pkl')
model_features = joblib.load('model_features.pkl')
import streamlit as st
import joblib
import pandas as pd

# Load trained model and features (adjust file paths here)
model = joblib.load('C:\\Users\\hp\\random_forest_model.pkl')
model_features = joblib.load('C:\\Users\\hp\\model_features.pkl')

# Streamlit page configuration
st.set_page_config(page_title="Insurance Premium Estimator", layout="centered")

# Title of the app
st.title("Insurance Premium Estimator")

# Sidebar header
st.sidebar.header("Enter your details")

# Input fields for the user
age = st.sidebar.slider("Age", 18, 100, 30)
weight = st.sidebar.number_input("Weight (kg)", min_value=30, max_value=200, value=70)
height = st.sidebar.number_input("Height (cm)", min_value=100, max_value=250, value=170)
diabetes = st.sidebar.radio("Do you have diabetes?", ("Yes", "No"))
blood_pressure = st.sidebar.radio("Do you have blood pressure problems?", ("Yes", "No"))
# Add more inputs as needed for other features...

# Prepare the input data as a DataFrame
input_data = pd.DataFrame({
    'Age': [age],
    'Weight': [weight],
    'Height': [height],
    'Diabetes': [1 if diabetes == "Yes" else 0],
    'BloodPressureProblems': [1 if blood_pressure == "Yes" else 0],
    # Add other features here...
})

# Calculate BMI (added as feature)
input_data['BMI'] = input_data['Weight'] / (input_data['Height'] / 100) ** 2

# Prediction Button
if st.button("Predict Premium"):
    # Ensure the input_data has the same feature columns as the model expects
    input_data = input_data[model_features]  # Reorder the input data based on saved features

    # Make prediction
    prediction = model.predict(input_data)

    # Display the result
    st.write(f"Predicted Premium: ${prediction[0]:.2f}")
